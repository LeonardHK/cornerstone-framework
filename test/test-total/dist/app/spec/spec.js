describe("종합 테스트",function(){var a,b=window.localStorage;beforeEach(function(){}),afterEach(function(){}),it("Test init",function(c){require(["js/chai"],function(d){a=d.expect,b.clear(),c()})}),it("define 함수로 모듈을 정의 ( 정적 Object ) 후 확인",function(b){require(["model/person"],function(c){a(c).to.be.an("object"),a(c.name).to.be.equal("홍길동"),a(c.age).to.be.equal(40),a(c.gender).to.be.equal("남"),b()})}),it("define 함수로 모듈을 정의 ( 동적 Function ) 후 확인",function(b){require(["dummy/calculator"],function(c){a(c).to.be.an("object"),a(c.calculateAge).to.be.a("function"),a(c.calculateAge()).to.be.equal(1e3),b()})}),it("모듈 정의시 타 모듈과 의존성 정의를 하고 로드, 해당 모듈에서 타 모듈을 사용해 본다.",function(b){require(["dummy/load-test"],function(c){a(c).to.be.an("object"),a(c.age).to.be.equal(1e3),b()})}),it('paths에 "모듈명": "경로" 를 작성하고 shim 설정 시 해당이름을 사용해본다. 이후 shim 설정을 통해 A 모듈의 deps를 B,C 로 지정하고 재로드 해본다.',function(b){a(window.dependency1).to.be.undefined,a(window.dependency2).to.be.undefined,requirejs.config({paths:{user:"model/user",dependency1:"dummy/dependency1",dependency2:"dummy/dependency2",export1:"dummy/export1"},shim:{user:{deps:["dependency1","dependency2"],exports:function(){return this}}}}),require(["user"],function(c){a(c).to.be.a("function"),a(window.dependency1).to.be.an("object"),a(window.dependency2).to.be.an("object"),b()})}),it("exports로 A 모듈 사용 시 전달될 파라미터 내용을 작성 후 해당 A모듈을 사용하는 B모듈작성 및 파라미터 전달확인",function(b){require(["export1"],function(c){a(c).to.be.an("object"),a(c.check()).to.be.equal("홍길동"),b()})});var c,d,e,f,g,h,i=!1;it("User 모듈을 로드 후 user객체를 생성 및 초기화 함수 실행 확인",function(b){require(["user"],function(e){c=e,d=new e,a(d).to.be.an.instanceof(Backbone.Model),a(d.get("init")).to.be.true,b()})}),it("생성된 user 객체에 get 함수를 이용 속성을 출력해본다.",function(){a(d.get("name")).to.be.equal("홍길동"),a(d.get("age")).to.be.equal(40),a(d.get("gender")).to.be.equal("male")}),it('user 객체에 set 함수를 이용 속성을 수정 후 출력해본다. ( "key", "value" )',function(){d.set("name","david"),a(d.get("name")).to.be.equal("david")}),it("user 객체에 set 함수를 이용 속성을 수정 후 출력해본다. { Object }",function(){d.set({job:"컨설턴트"}),a(d.get("job")).to.be.equal("컨설턴트")}),it("user 객체에 change 이벤트 발생 시 실행될 함수를 정의하고 실행되는지 확인한다.",function(b){d.on("change",function(c){a(c).to.be.an("object"),i=!i,b()}),d.set("job","개발자")}),it("user 객체에 change 이벤트 해제 하고 이벤트 발생 시 함수가 실행되지 않는지 확인한다.",function(){a(i).to.be.true,d.off("change"),d.set("job","기확자"),a(i).to.be.true}),it("특정 속성값 변화 이벤트 발생 시 실행될 함수를 정의하고 실행되는지 확인한다.",function(b){d.on("change:name",function(c){a(c).to.be.an("object"),a(c.changed.name).to.be.not.undefined,i=!i,b()}),d.set("gender","female"),d.set("name","박윤화")}),it("user 객체에 change:name 이벤트 해제 하고 이벤트 발생 시 함수가 실행되지 않는지 확인한다.",function(){a(i).to.be.false,d.off("change:name"),d.set("name","홍미선"),a(i).to.be.false}),it("user 객체에 모델의 고유식별자 인 cid 존재하는지 확인한다.",function(){a(d.cid).to.be.not.undefined,a(d.cid).to.be.a("string")}),it("user 객체에 새로 만들어진(서버와 동기화 되지않은) 모델인지 판별한다. 새로만들어진 모델로 판별되어야 한다.",function(){a(d.isNew()).to.be.true,a(d.id).to.be.undefined}),it("Backbone.Collection의 extend를 사용하여 Users 클래스를 정의 및 확인한다.",function(){e=Backbone.Collection.extend({model:c,url:"/users"}),f=new e,a(e).to.be.an("function"),a(f.length).to.be.equal(0),a(f).to.be.an.instanceof(Backbone.Collection)}),it("콜랙션 생성 시 파라미터로 객체 array 전달로 생성되는지 확인한다.",function(){g=new e([d]),a(g.length).to.be.equal(1),a(g).to.be.an.instanceof(Backbone.Collection)}),it("파라미터로 객체를 생성하면서 array 전달로 생성되는지 확인한다.",function(){h=new e([{name:"홍길동",age:40},{name:"김철수",age:35},{name:"이영수",age:20}]),a(h.length).to.be.equal(3),a(h).to.be.an.instanceof(Backbone.Collection)}),it("생성된 Collection 객체에 Model을 추가되는지 확인한다.",function(){f.add([{name:"박철수",age:25,gender:"male"},{name:"최영희",age:30,gender:"female"}]),a(f.length).to.be.equal(2)}),it("id로 Model을 찾는다.",function(){var b=new c({name:"test name",age:60});b.id=999,f.add(b);var d=f.get(999);a(d.get("name")).to.be.equal("test name")}),it("at함수를 사용 index로 Model을 구한다.",function(){var b=f.at(1);a(b).to.be.an.instanceof(Backbone.Model),a(b.get("name")).to.be.equal("최영희"),a(b.get("age")).to.be.equal(30),a(b.get("gender")).to.be.equal("female")}),it("cid로 Model을 찾는다.",function(){var b=f.get("c6");a(b).to.be.an.instanceof(Backbone.Model),a(b.get("name")).to.be.equal("박철수"),a(b.get("age")).to.be.equal(25),a(b.get("gender")).to.be.equal("male")}),it("where함수를 사용 Model들을 찾는다. (Model의 배열을 리턴)",function(){var b=f.where({age:25});a(b).to.be.an("array"),a(b.length).to.be.equal(1),a(b[0].get("name")).to.be.equal("박철수"),a(b[0].get("age")).to.be.equal(25),a(b[0].get("gender")).to.be.equal("male")});var j,k,l,m,n,o;it("User model과 상호작용할 UserView 클래스가 생성되는지 확인한다.",function(){j=Backbone.View.extend({tagName:"ul",className:"user",render:function(){}}),l=new j({model:new c}),a(l).to.be.an.instanceof(Backbone.View),a(l.model).to.be.an.instanceof(Backbone.Model),a(l.model.get("name")).to.be.equal("홍길동")}),it("UserView 생성 시 el을 지정하여 생성되는지 확인한다.",function(){n=Backbone.View.extend({el:"section#page1",render:function(){}}),o=new n({model:new c}),a(o).to.be.an.instanceof(Backbone.View),a(o.model).to.be.an.instanceof(Backbone.Model),a(o.model.get("name")).to.be.equal("홍길동"),a(o).to.be.not.an.instanceof(j),a(o.el).to.be.not.undefined,a(o.$el).to.be.an("object")});var p=0;it("userView를 다음과 같이 정의 render 함수를 정의 및 렌더링 실행 후 화면에 보이는 지 확인.",function(b){k=Backbone.View.extend({tagName:"li",className:"user",events:{click:"increaseAge"},render:function(){return this.$el.html('<span class="name">'+this.model.get("name")+'</span> / <span class="age">'+this.model.get("age")+"</span>"),this},increaseAge:function(){p=parseInt(this.model.get("age")),this.model.set("age",parseInt(this.model.get("age"))+1),this.render()}}),d.set("male",!1),m=new k({model:d}),o.$el.find("ul.users").append(m.render().el),a(m).to.be.an.instanceof(Backbone.View),a(m.model).to.be.an.instanceof(Backbone.Model);var c=o.$el.find("li").length;o.$el.find("li").each(function(d){a($(this).hasClass("user")).to.be.true,d+1===c&&b()})}),it("view에 이벤트 바인딩 및 동작 확인",function(b){m.$el.click(function(){setTimeout(function(){a(parseInt(m.model.get("age"))).to.be.equal(p+1),b()},10)}),m.$el.click()}),it("userTemplate.template 파일을 작성 및 render 확인, 동적 CSS 로드 확인",function(b){require(["template!../app/template/user","jquery","style!../app/css/user"],function(d){var e=new k({model:new c({name:"김철수",age:20,male:!0}),events:null});e.render=function(){return this.$el.html(d({user:this.model.toJSON()})),a(this.el).to.be.not.undefined,b(),this},o.$el.find("ul.template_users").append(e.render().el)})}),it("require.js에 style을 template과 의존성 설정 후 자동 로드 되는지 확인",function(b){requirejs.config({paths:{userTemplate1:"../app/template/user1"},shim:{"template!userTemplate1":["style!../app/css/user1"]}}),require(["template!userTemplate1","jquery"],function(d){var e=new k({model:new c({name:"최은수",age:27,male:!1}),events:null});e.render=function(){this.$el.html(d({user:this.model.toJSON()}));var c=this;return a(this.el).to.be.not.undefined,setTimeout(function(){a(c.$el.closest("li").css("color")).to.be.equal("rgb(0, 128, 0)"),b()},200),this},o.$el.find("ol.template_users1").append(e.render().el)})});var q,r,s,t,u,v;it("form view를 이용하여 model값이 표현되고 model의 값과 표시된 값이 동일한지 확인",function(b){require(["template!../app/template/userForm","form-view"],function(d,e){t=new c({name:"트래버",age:35,job:"노동자"}),o.$el.find(".btn-group").next().append(d()).find("form").attr("id","add-form"),q=new e({el:"#add-form",model:t}),a(q).to.be.an.instanceof(Backbone.View),a(q.model.get("name")).to.be.equal(q.$el.find('input[name="name"]').val()),a(q.model.get("age")).to.be.equal(parseInt(q.$el.find('input[name="age"]').val())),a(q.model.get("job")).to.be.equal(q.$el.find('input[name="job"]').val()),b()})}),it("form의 내용이 model 객체에 반영되는지 확인",function(b){q.$el.find('input[name="name"]').val("마이클"),q.$el.find('input[name="age"]').val("39"),q.$el.find('input[name="job"]').val("스파이"),q.$el.find(".js-submit").on("click",function(){q.toModel(),a(t.get("name")).to.be.equal("마이클"),a(parseInt(t.get("age"))).to.be.equal(39),a(t.get("job")).to.be.equal("스파이"),$(this).off("click"),b()}),q.$el.find(".js-submit").trigger("click")}),it("Model 객체에 validate 함수를 구현하고 동작되는지 확인",function(b){q.$el.find('input[name="name"]').val(""),q.$el.find(".js-submit").on("click",function(){q.toModel();var c=q.$el.find('input[name="name"]').next();a(c).to.be.not.undefined,a(c.hasClass("tooltip")).to.be.true,a(c.find(".tooltip-inner").text()).to.be.equal("이름을 입력하세요."),$(this).off("click"),b()}),q.$el.find(".js-submit").click()}),it("Model에 invalid 이벤트를 연결하고 model값을 변경했을 때 감지 되는지 확인한다.",function(b){t.on("invalid",function(c,d){a(c).to.be.an.instanceof(Backbone.Model),a(d.attribute).to.be.equal("name"),b()}),q.$el.find(".js-submit").on("click",function(){q.toModel()}).trigger("click")}),it("TODO validation view를 로드 후 formView에 생성옵션으로 지정, 동작 확인",function(){require(["validation-view","template!../app/template/userForm","form-view"],function(b,d,e){u=new c({name:"프랭클린",age:25,job:"배송업",validate:!0}),o.$el.find("#add-form").parent().append(d()).find("form:last-child").attr("id","modify-form"),r=new e({el:"#modify-form",model:u,validationViewClass:b}),a(r).to.be.an.instanceof(Backbone.View)})}),it("TODO custom validation view를 사용해 본다.",function(a){require(["view/validationView","template!../app/template/userForm","form-view"],function(b,d,e){v=new c({name:"데빈",age:40,job:"공무원",validate:!0}),o.$el.find("#add-form").parent().append(d()).find("form:last-child").attr("id","valid-form"),s=new e({el:"#valid-form",model:v,validationViewClass:b}),o.$el.find('#valid-form input[name="name"]').val(""),s.$el.find(".js-submit").on("click",function(){s.toModel(),a()}),s.$el.find(".js-submit").click()})});var w;it("Collection에 속한 Model이 url을 이어받는지 확인",function(){w=new e;var b=new c({id:1}),d=new c({id:2});w.add([b,d]),a(b.url()).to.be.equal("/users/1"),a(d.url()).to.be.equal("/users/2")}),it("Model 클래스를 정의하면서 root url 지정이 되는지 확인",function(){var b=Backbone.Model.extend({urlRoot:"/users"}),c=new b({id:3});a(c.url()).to.be.equal("/users/3")}),it("Model 객체를 생성하면서 root url 지정이 되는지 확인",function(){var b=Backbone.Model.extend(),c=new b({id:100});c.urlRoot="users/",a(c.url()).to.be.equal("users/100")}),it("동기화 방법이 변경되는지 확인( framework내의 sync로 사용변경 )",function(b){require(["sync"],function(c){a(c).to.be.not.undefined,Backbone.sync=c.local,b()})}),it("hash fragment를 이용하여 서버요청 없이 분기가 가능한지 확인 (page1 -> page2)",function(b){$("#page1 button.btn.next").click(function(){setTimeout(function(){a($("#page1").css("display")).to.be.equal("none"),a($("#page2").css("display")).to.be.equal("block"),b()},1e3)}).trigger("click")}),it("hash fragment를 이용하여 서버요청 없이 분기가 가능한지 확인 (page2 -> page1)",function(b){$("#page2 button.btn.prev").click(function(){setTimeout(function(){a($("#page2").css("display")).to.be.equal("none"),a($("#page1").css("display")).to.be.equal("block"),b()},1e3)}).trigger("click")}),it("#매칭이 실패했을 때 동작하는 default route 확인",function(b){window.location.href="#asdfasdfaf",setTimeout(function(){a($("#page2").css("display")).to.be.equal("none"),a($("#page1").css("display")).to.be.equal("block"),b()},1e3)}),it("URL 패턴에서 :로 시작되는 부분이 파라미터로 분리되어 전달되는 지 확인 및 active 함수가 정상 동작하는지 확인",function(b){window.location.href="#page3/1",setTimeout(function(){a(parseInt($("#page3 p.js-active").text())).to.be.equal(1),window.location.href="#page1",b()},1e3)})});