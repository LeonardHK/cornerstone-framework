import java.io.*;
import java.util.*;

public class Repl {

  public static String getCodemirrorBlock() {

    String s;
    s =  "<% codeMirrorRequiredBlock = (obj) => %>                                                                          \n";
    s += "<script src='lib/codemirror.js'></script>                                                                         \n";
    s += "<script src='mode/xml/xml.js'></script>                                                                           \n";
    s += "<script src='mode/javascript/javascript.js'></script>                                                             \n";
    s += "<script src='mode/css/css.js'></script>                                                                           \n";
    s += "<script src='mode/htmlmixed/htmlmixed.js'></script>                                                               \n";
    s += "<link rel='stylesheet' href='lib/codemirror.css'></link>                                                          \n";
    s += "<link rel='stylesheet' href='theme/ambiance.css'></link>                                                          \n";
    s += "<style>                                                                                                           \n";
    s += ".CodeMirror { float: left; width: 100%; margin-bottom: 10px; }                                                    \n";
    s += "iframe { width: 100%; float: left; height: 300px; border: 1px solid black; border-left: 0px; }                    \n";
    s += "</style>                                                                                                          \n";
    s += "<% end %>                                                                                                         \n";
    s += "<%- codeMirrorRequiredBlock '1' %>                                                                                \n";
    s += "                                                                                                                  \n";
    s += "<% codeMirrorBlock = (obj) => %>                                                                                  \n";
    s += "<p>                                                                                                               \n";
    s += "<div class='highlight'>                                                                                           \n";
    s += "<iframe id=preview_<%= obj.funcname %>></iframe>                                                                  \n";
    //s += "<p style='margin-bottom:0px;color=white'>-</p>                                                                    \n";
    s += "<textarea id=code_<%= obj.funcname %> name=code_<%= obj.funcname %>>                                              \n";
    s += "<!doctype html>                                                                                                   \n";
    s += "<html>                                                                                                            \n";
    s += "  <head>                                                                                                          \n";
    s += "    <meta charset=utf-8>                                                                                          \n";
    s += "    <link rel='stylesheet' href='./dist/lib/bootstrap/css/bootstrap.css' />                                       \n";
    s += "    <link rel='stylesheet' href='./dist/lib/bootstrap/css/bootstrap-responsive.css' />                            \n";
    s += "    <link rel='stylesheet' href='./dist/ui/theme/dark/css/cornerstone.css' />                                     \n";
    s += "    <link rel='stylesheet' href='./dist/ui/widget-chart.css' />                                                   \n";
    s += "    <link rel='stylesheet' href='./dist/ui/widget-media.css' />                                                   \n";
    s += "    <link rel='stylesheet' href='./dist/ui/widget-scrollview.css' />                                              \n";
    s += "    <script src='./dist/lib/jquery-1.8.1.min.js'></script>                                                        \n";
    s += "    <script src='./dist/ui/widget-chart.js'></script>                                                             \n";
    s += "    <script src='./dist/ui/widget-datatable.js'></script>                                                         \n";
    s += "    <script src='./dist/ui/widget-editor.js'></script>                                                            \n";
    s += "    <script src='./dist/ui/widget-listview.js'></script>                                                          \n";
    s += "    <script src='./dist/ui/widget-media.js'></script>                                                             \n";
    s += "    <script src='./dist/ui/widget-plugins.js'></script>                                                           \n";
    s += "    <script src='./dist/ui/widget-scrollview.js'></script>                                                        \n";
    s += "  </head>                                                                                                         \n";
    s += "  <body>                                                                                                          \n";
    s += "    <%- obj.func '1' %>                                                                                           \n";
    s += "  </body>                                                                                                         \n";
    s += "</html>                                                                                                           \n";
    s += "</textarea>                                                                                                       \n";
    s += "<script>                                                                                                          \n";
    s += "  var delay_<%= obj.funcname %>;                                                                                  \n";
    s += "  var editor_<%= obj.funcname %> = CodeMirror.fromTextArea(document.getElementById('code_<%= obj.funcname %>'), { \n";
    s += "    theme: 'ambiance',                                                                                            \n";
    s += "    lineNumbers: true,                                                                                            \n";
    s += "    mode: 'text/html',                                                                                            \n";
    s += "    tabMode: 'indent',                                                                                            \n";
    s += "    onChange: function() {                                                                                        \n";
    s += "      clearTimeout(delay_<%= obj.funcname %>);                                                                    \n";
    s += "      delay_<%= obj.funcname %> = setTimeout(updatePreview_<%= obj.funcname %>, 300);                             \n";
    s += "    }                                                                                                             \n";
    s += "  });                                                                                                             \n";
    s += "  function updatePreview_<%= obj.funcname %>() {                                                                  \n";
    s += "    var previewFrame = document.getElementById('preview_<%= obj.funcname %>');                                    \n";
    s += "    var preview =  previewFrame.contentDocument ||  previewFrame.contentWindow.document;                          \n";
    s += "    preview.open();                                                                                               \n";
    s += "    preview.write(editor_<%= obj.funcname %>.getValue());                                                         \n";
    s += "    preview.close();                                                                                              \n";
    s += "  }                                                                                                               \n";
    s += "  setTimeout(updatePreview_<%= obj.funcname %>, 300);                                                             \n";
    s += "</script>                                                                                                         \n";
    s += "</div>                                                                                                            \n";
    s += "</p>                                                                                                              \n";
    s += "<% end %>                                                                                                         \n";

    return s;
  }

  public static void convertMD2eco(File mdfile) {

      if ( mdfile.isDirectory() ) {
          // 디렉토리는 변환 대상이 아님.
          return;
      } else if ( !mdfile.getName().endsWith(".md") ) { 
          // 마크다운 파일임을 표시하지 않은 경우 변환하지 않는다.
          return;
      } else {
          System.err.println( "- Markdown File ! ( "+mdfile.getName()+" )" );
      }

      try {
              BufferedReader in  = new BufferedReader( new FileReader(mdfile) );

              String s;

              s = in.readLine();
              if (s == null) {
                System.err.println("- Input file is blank...");
                in.close();
                return;                 // 빈 파일인 경우 종료
              }

              String outFileName = mdfile.getName().replace(".","_").replace("_md",".html.md.eco").replace(" ","_");
              BufferedWriter out = new BufferedWriter( new FileWriter(outFileName) );

              // 헤더 부분 첫 줄 처리
              if ( s.trim().startsWith("<!--") ) {
                  out.write("---");
                  out.newLine();
                  // 헤더 나머지 부분 처리
                  while ((s = in.readLine()) != null) {

                      if ( s.trim().startsWith("-->") ) { // 헤더 부분 마지막 줄 처리
                          out.write("---");
                          out.newLine();
                          break;
                      } else if ( s.trim().startsWith("section:") ) { // 메타정보 section 처리
                          out.write(s);
                          out.newLine();

                          String tmp;
                          tmp = s.trim().substring(8); // "section:" 이후 부분만 추출
                          tmp = "sections: ["+tmp.trim()+"]";
                          out.write(tmp);
                          out.newLine();
                      } else if ( s.trim().startsWith("tagstr:") ) { // 메타정보 tagstr 처리
                          out.write(s);
                          out.newLine();

                          String tmp;
                          tmp = s.trim().substring(7); // "tagstr:" 이후 부분만 추출
                          StringTokenizer st = new StringTokenizer(tmp," '‘");
                          tmp = "";
                          for(int i=1; st.hasMoreTokens(); i++) {
                              tmp = tmp + "'" + st.nextToken() + "',";
                          }

                          tmp = "tags: ['post',"+tmp+"'']";
                          out.write(tmp);
                          out.newLine();
                      } else if ( s.trim().startsWith("order:") ) {  // 메타정보 order 처리
                          s.replace("‘","'");
                          out.write(s);
                          out.newLine();
                      } else {
                          out.write(s);
                          out.newLine();
                      }

                  }
              } else {
                System.err.println("- Input file has no header ! Documents must start with <!-- at first line.");
                in.close();
                out.close();
                File f = new File(outFileName);
                f.delete();
                return;
              }

              int preview_cnt=0;
              while ((s = in.readLine()) != null) {
                if (s.trim().length() >= 6) {  // 코드미러 블럭으로 변환해야 하는 부분 처리
                    //System.out.println(s.trim().substring(0,6));
                    if ( s.trim().substring(0,6).equals("``` cm")) {

                        if (preview_cnt==0) {
                          s = getCodemirrorBlock();
                          out.write(s);
                          out.newLine();
                        }

                        preview_cnt++;
                        String funcName = "prv_" + preview_cnt;
                        s = "<% "+funcName+" = (contents) => %>";
                        out.write(s);
                        out.newLine();
                        while ((s = in.readLine()) != null) {

                            if (s.trim().length() >= 3) {
                                if ( s.trim().substring(0,3).equals("```")) {
                                    s = "<% end %><%- codeMirrorBlock {func : "+funcName+" , funcname : '"+funcName+"'} %>";
                                    out.write(s);
                                    out.newLine();
                                    break;
                                } else {
                                    out.write(s);
                                    out.newLine();
                                }
                            } else {
                                out.write(s);
                                out.newLine();
                            }

                        }
                    } else {  // 처리가 필요 없는 라인
                        out.write(s);
                        out.newLine();
                    }
                } else {
                    out.write(s);
                    out.newLine();
                }
              }
              in.close();
              out.close();
      } catch (IOException e) {
          System.err.println(e); // 에러가 있다면 메시지 출력
          return;
      }
  }

  public static void main(String args[]) {

    if (args.length == 0) {                   // args.length 는 옵션 개수
      System.err.println("Input Directory name...");
      System.exit(1);                         // 읽을 파일명을 주지 않았을 때는 종료
    }
    File md_directory = new File(args[0]);
    File mds[];
    if (md_directory.isDirectory()) {
        mds = md_directory.listFiles();

        for (int i=0; i<mds.length; i++) {
            System.err.println( "i="+i+" : FileName = "+mds[i].getAbsolutePath() );
            convertMD2eco(mds[i]);
        }

    } else {
        System.err.println("Not Directory! need directory name...");
        System.exit(1);
    }

  }
}
