// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(BasePlugin) {
    var FeedrPlugin, balUtil, pathUtil, request;
    balUtil = require('bal-util');
    request = require('request');
    pathUtil = require('path');
    return FeedrPlugin = (function(_super) {

      __extends(FeedrPlugin, _super);

      function FeedrPlugin() {
        return FeedrPlugin.__super__.constructor.apply(this, arguments);
      }

      FeedrPlugin.prototype.name = 'feedr';

      FeedrPlugin.prototype.config = {
        tmpPath: null,
        refreshCache: false,
        cacheTime: 1000 * 60 * 5
      };

      FeedrPlugin.prototype.renderBefore = function(_arg, next) {
        var docpad, failures, feedr, tasks, templateData, _base, _base1;
        templateData = _arg.templateData;
        docpad = this.docpad;
        feedr = this;
        (_base = feedr.config).feeds || (_base.feeds = {});
        templateData.feedr || (templateData.feedr = {});
        (_base1 = templateData.feedr).feeds || (_base1.feeds = {});
        failures = 0;
        tasks = new balUtil.Group(function(err) {
          docpad.log((failures ? 'warn' : 'debug'), 'Feedr finished fetching', (failures ? "with " + failures + " failures" : ''));
          return next(err);
        });
        balUtil.each(feedr.config.feeds, function(feedDetails, feedName) {
          return tasks.push(function(complete) {
            return feedr.readFeed(feedName, feedDetails, function(err, data) {
              if (err) {
                docpad.log('debug', "Feedr failed to fetch [" + feedDetails.url + "] to [" + feedDetails.path + "]");
                docpad.error(err);
                ++failures;
              } else {
                templateData.feedr.feeds[feedName] = data;
              }
              return complete();
            });
          });
        });
        docpad.log('debug', "Feedr is fetching " + tasks.total + " feeds...", (failures ? "with " + failures + " failures" : ''));
        if (feedr.config.tmpPath) {
          return tasks.async();
        } else {
          return balUtil.getTmpPath(function(err, tmpPath) {
            if (err) {
              return next(err);
            }
            feedr.config.tmpPath = tmpPath;
            return tasks.async();
          });
        }
      };

      FeedrPlugin.prototype.readFeed = function(feedName, feedDetails, next) {
        var cleanData, docpad, feedHash, viaCache, viaRequest, writeFeed;
        docpad = this.docpad;
        feedHash = require('crypto').createHash('md5').update("docpad-feedr-" + JSON.stringify(feedDetails)).digest('hex');
        feedDetails.path = pathUtil.join(this.config.tmpPath, feedHash);
        cleanData = function(data) {
          var key, keys, value;
          keys = [];
          for (key in data) {
            if (!__hasProp.call(data, key)) continue;
            value = data[key];
            if (balUtil.isPlainObject(data)) {
              data[key] = cleanData(value);
            }
            keys.push(key);
          }
          if (keys.length === 1 && keys[0] === '_content') {
            data = data._content;
          }
          return data;
        };
        writeFeed = function(data) {
          return balUtil.writeFile(feedDetails.path, JSON.stringify(data), function(err) {
            if (err) {
              return next(err);
            }
            return next(null, data);
          });
        };
        viaCache = function() {
          docpad.log('debug', "Feedr fetched [" + feedDetails.url + "] from cache");
          return balUtil.exists(feedDetails.path, function(exists) {
            if (!exists) {
              return next();
            }
            return balUtil.readFile(feedDetails.path, function(err, dataBuffer) {
              var data;
              if (err) {
                return next(err);
              }
              data = JSON.parse(dataBuffer.toString());
              return next(null, data);
            });
          });
        };
        viaRequest = function() {
          docpad.log('debug', "Feedr is fetching [" + feedDetails.url + "] to [" + feedDetails.path + "]");
          return request(feedDetails.url, function(err, response, body) {
            var data, parser, xml2js;
            if (err) {
              return viaCache();
            }
            body = body.trim();
            if (/^</.test(body)) {
              xml2js = require("xml2js");
              parser = new xml2js.Parser();
              parser.on('end', function(data) {
                return writeFeed(data);
              });
              return parser.parseString(body);
            } else {
              try {
                body = body.replace(/^[a-z0-9]+/gi, '').replace(/^\(|\)$/g, '');
                return data = JSON.parse(body);
              } catch (err) {
                try {
                  body = body.replace(/\\'/g, "'");
                  return data = JSON.parse(body);
                } catch (err) {
                  if (err) {
                    return next(err);
                  }
                }
              } finally {
                if (feedDetails.clean) {
                  docpad.log('debug', "Feedr is cleaning data from [" + feedDetails.url + "]");
                  data = cleanData(data);
                }
                writeFeed(data);
              }
            }
          });
        };
        if (this.config.refreshCache) {
          viaRequest();
        } else {
          balUtil.isPathOlderThan(feedDetails.path, this.config.cacheTime, function(err, older) {
            if (err) {
              return next(err);
            }
            if (older === null || older === true) {
              return viaRequest();
            } else {
              return viaCache();
            }
          });
        }
        return this;
      };

      return FeedrPlugin;

    })(BasePlugin);
  };

}).call(this);
