
/**
 * Cornerstone Framework Build Script (using jake)
 *
 * ex) jake source=/home/user/src lib=/home/user/lib dist=/home/user/dist
 */

var j = require( './job' );

const PATH_SOURCE = process.env.source || '../src/';
const PATH_LIB = process.env.lib || '../lib/';
const PATH_DIST = process.env.dist || '../dist/';

function runTask() {

	var startTime;
	var taskName = arguments[ 0 ].toUpperCase();
	var actionIndex = typeof arguments[ 1 ] === 'function' ? 1 : 2;
	var action = arguments[ actionIndex ];
	
	arguments[ actionIndex ] = function() {
		j.log();
		j.log( '  #yellow[' + taskName + '] 시작' );
		
		startTime = new Date().getTime();
		
		action.apply( this, arguments );
	};
	
	task.apply( this, arguments ).addListener( 'complete', function() {
		j.log( '  #green[' + taskName + '] 완료 (' + ( new Date().getTime() - startTime ) + ' ms)' );
	} );
}

jake.addListener( 'complete', function() {
	j.log();
} );

// --------------------------------------------------------------------

desc( '배포 디렉토리를 초기화한다.' );
runTask( 'init', function() {

	// 배포 디렉토리 모두 삭제
	j.files( PATH_DIST, '*' ).delete();
	
	// 디렉토리 생성
	j.mkdir( PATH_DIST + 'lib' );
	j.mkdir( PATH_DIST + 'loader' );
	j.mkdir( PATH_DIST + 'mvc/model' );
	j.mkdir( PATH_DIST + 'mvc/view' );
	j.mkdir( PATH_DIST + 'ui' );
	j.mkdir( PATH_DIST + 'ui/img' );
	j.mkdir( PATH_DIST + 'ui/theme/dark/css' );
	j.mkdir( PATH_DIST + 'ui/theme/white/css' );
	j.mkdir( PATH_DIST + 'util' );
} );

desc( '소스 파일들을 검증한다. 그 전에 init를 수행한다.' );
runTask( 'validate', [ 'init' ], function() {
} );

desc( '소스 파일들을 최적화해서 결과를 배포 디렉토리에 넣는다. 그 전에 validate를 수행한다.' );
runTask( 'deploy', [ 'validate' ], function() {
	
	// 외부 라이브러리 복사
	j.copy( PATH_LIB, PATH_DIST + 'lib' );
	
	// Plugin 파일 통합
	j.concat(
		PATH_LIB + 'bootstrap/js/bootstrap.js',
		PATH_SOURCE + 'ui/widget/plugins/plugin-cornerstone.js',
		PATH_SOURCE + 'ui/widget/plugins/plugin-touch.js',
		PATH_SOURCE + 'ui/widget/plugins/plugin-motioncapcha.js',
		PATH_SOURCE + 'ui/widget/plugins/plugin-rangeinput.js',
		PATH_SOURCE + 'ui/widget/plugins/plugin-sign.js',
		PATH_SOURCE + 'ui/widget/plugins/plugin-spinner.js',
		PATH_SOURCE + 'ui/widget/plugins/plugin-datepicker.js',
		PATH_DIST + 'ui/widget-plugins.js'
	);
	
	// Featured 파일 통합
	j.concat(
		PATH_SOURCE + 'ui/widget/featured/chart/d3.v2.js',
		PATH_SOURCE + 'ui/widget/featured/chart/nv.d3.js',
		PATH_SOURCE + 'ui/widget/featured/chart/widget-chart.js',
		PATH_DIST + 'ui/widget-chart.js'
	);

	j.concat(
   		PATH_SOURCE + 'ui/widget/featured/chart/widget-chart.css',
		PATH_DIST + 'ui/widget-chart.css'
	);
	
	j.concat(
		PATH_SOURCE + 'ui/widget/featured/datatable/jquery.dataTables.min.js',
		PATH_SOURCE + 'ui/widget/featured/datatable/widget-datatable.js',
		PATH_DIST + 'ui/widget-datatable.js'
	);
	
	j.concat(
		PATH_SOURCE + 'ui/widget/featured/list-view/infinity.js',
		PATH_SOURCE + 'ui/widget/featured/list-view/widget-listview.js',
		PATH_DIST + 'ui/widget-listview.js'
	);
	
	j.concat(
		PATH_SOURCE + 'ui/widget/featured/media/mediaelement-and-player.js',
		PATH_SOURCE + 'ui/widget/featured/media/widget-media.js',
		PATH_DIST + 'ui/widget-media.js'
	);
	
	j.concat(
		PATH_SOURCE + 'ui/widget/featured/scroll-view/iscroll.js',
		PATH_SOURCE + 'ui/widget/featured/scroll-view/widget-scrollview.js',
		PATH_DIST + 'ui/widget-scrollview.js'
	);

	j.concat(
   		PATH_SOURCE + 'ui/widget/featured/scroll-view/widget-scrollview.css',
		PATH_DIST + 'ui/widget-scrollview.css'
	);

	j.copy( PATH_SOURCE + 'ui/widget/featured/scroll-view/img', PATH_DIST + 'ui/img' );

	j.concat(
		PATH_SOURCE + 'ui/widget/featured/editor/wysihtml5.js',
		PATH_SOURCE + 'ui/widget/featured/editor/bootstrap-wysihtml5.js',
		PATH_SOURCE + 'ui/widget/featured/editor/widget-editor.js',
		PATH_DIST + 'ui/widget-editor.js'
	);

	j.concat(
		PATH_SOURCE + 'ui/widget/featured/editor/bootstrap-wysihtml5.css',
		PATH_DIST + 'ui/bootstrap-wysihtml5.css'
	);

	// minify
	j.files( PATH_DIST + 'ui', '**/*.js' ).minify( PATH_DIST + 'ui' );
	j.files( PATH_SOURCE, '*.js' ).minify( PATH_DIST );
	j.files( PATH_SOURCE + 'loader', '**/*.js' ).minify( PATH_DIST + 'loader' );
	j.files( PATH_SOURCE + 'mvc/model', '**/*.js' ).minify( PATH_DIST + 'mvc/model' );
	j.files( PATH_SOURCE + 'mvc/view', '**/*.js' ).minify( PATH_DIST + 'mvc/view' );
	j.files( PATH_SOURCE + 'util', '**/*.js' ).minify( PATH_DIST + 'util' );
	
	// 이미지 파일 복사
	j.copy( PATH_SOURCE + 'ui/theme/dark/img', PATH_DIST + 'ui/theme/dark/img' );
	j.copy( PATH_SOURCE + 'ui/theme/white/img', PATH_DIST + 'ui/theme/white/img' );
	
	// less 컴파일
	j.less( PATH_SOURCE + 'ui/theme/dark/less/cornerstone.less', PATH_DIST + 'ui/theme/dark/css/cornerstone.css', function( err ) {
		if ( err ) fail( err );
		
		j.less( PATH_SOURCE + 'ui/theme/white/less/cornerstone.less', PATH_DIST + 'ui/theme/white/css/cornerstone.css', function( err ) {
			if ( err ) fail( err );
			
			complete();
		} );
	} );
	
}, { async: true } );

desc( '디폴트 작업으로 deploy를 수행한다.' );
task( 'default', [ 'deploy' ], function() {} );
